# Copyright 2019 The Mumble Developers. All rights reserved.
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file at the root of the
# Mumble source tree or at <https://www.mumble.info/LICENSE>.

cmake_minimum_required(VERSION 3.15)

cmake_policy(SET CMP0079 NEW)
cmake_policy(SET CMP0091 NEW)

set(version "1.4.0" CACHE STRING "Project version")

project(Mumble
	VERSION ${version}
	DESCRIPTION "Open source, low-latency, high quality voice chat software primarily intended for use while gaming."
	HOMEPAGE_URL "https://www.mumble.info"
	LANGUAGES "C" "CXX"
)

set(3RDPARTY_DIR "${CMAKE_SOURCE_DIR}/3rdparty")

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_OSX_DEPLOYMENT_TARGET 10.9)

list(APPEND CMAKE_MODULE_PATH
	"${CMAKE_SOURCE_DIR}/cmake"
	"${CMAKE_SOURCE_DIR}/cmake/FindModules"
)

include(pkg-utils)
include(CTest)

option(optimize "Build a heavily optimized version, specific to the machine it's being compiled on." OFF)
option(static "Build static binaries." OFF)
option(symbols "Build binaries in a way that allows easier debugging." OFF)
option(warnings-as-errors "All warnings are treated as errors." OFF)

option(dpkg-buildflags "Add CFLAGS, CXXFLAGS, CPPFLAGS and LDFLAGS from dpkg-buildflags to the build flags." OFF)

option(overlay "Build overlay." ON)
option(plugins "Build plugins." ON)

# We support the "Debug" and "Release" configurations.
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release")

# CMAKE_CONFIGURATION_TYPES exists with multi configuration generators, such as Visual Studio.
if(CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "" FORCE)
endif()

# We set the CMake configuration to "Release", in case it's not set.
if(NOT CMAKE_CONFIGURATION_TYPES)
	if(NOT CMAKE_BUILD_TYPE)
		set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Release")
	elseif(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
		add_definitions("-DDEBUG" "-DSNAPSHOT_BUILD")
	elseif(NOT ${CMAKE_BUILD_TYPE} STREQUAL "Release")
		message(FATAL_ERROR "Unsupported build type! Please choose either \"Debug\" or \"Release\".")
	endif()
endif()

if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
	set(64_BIT TRUE)
elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
	set(32_BIT TRUE)
endif()

# Qt-related performance tweaks.
add_definitions("-DQT_USE_FAST_CONCATENATION" "-DQT_USE_FAST_OPERATOR_PLUS")
# To be uncommented when the resulting errors are fixed.
#add_definitions("-DQT_NO_CAST_FROM_ASCII" "-DQT_NO_CAST_TO_ASCII")

if(WIN32)
	add_definitions("-DUNICODE" "-DWIN32_LEAN_AND_MEAN")
else()
	find_pkg(OpenSSL QUIET)
	find_pkg(Qt5 QUIET)

	if(NOT OpenSSL_FOUND)
		if(APPLE)
			# Homebrew
			set(OPENSSL_ROOT_DIR "/usr/local/opt/openssl")
		endif()
	endif()

	if(NOT Qt5_FOUND)
		if(APPLE)
			# Homebrew
			set(Qt5_DIR "/usr/local/opt/qt5/lib/cmake/Qt5")
		elseif(${CMAKE_SYSTEM_NAME} STREQUAL "OpenBSD")
			set(Qt5_DIR "/usr/local/lib/qt5/cmake/Qt5")
		endif()
	endif()
endif()

if(MSVC)
	if($<CONFIG:Release>)
		add_compile_options("/Ox" "/fp:fast")
	endif()

	if(32_BIT)
		# SSE2 code is generated by default, unless an explict arch is set.
		# Our 32 bit binaries should not contain any SSE2 code, so override the default.
		add_link_options("-arch:SSE")
	endif()

	if(symbols)
		# Configure build to be able to properly debug release builds (https://docs.microsoft.com/cpp/build/how-to-debug-a-release-build).
		# This includes explicitely disabling /Oy to help debugging (https://docs.microsoft.com/cpp/build/reference/oy-frame-pointer-omission).
		# Also set /Zo to enhance optimized debugging (https://docs.microsoft.com/cpp/build/reference/zo-enhance-optimized-debugging).
		add_compile_options("/GR" "/Zi" "/Zo" "/Oy-")
		add_link_options("/DEBUG" "/OPT:REF" "/OPT:ICF" "/INCREMENTAL:NO")
	endif()

	if(warnings-as-errors)
		add_compile_options("/WX")
		add_link_options("/WX")
	endif()
elseif(UNIX OR MINGW)
	add_compile_options("-fvisibility=hidden" "-Wall" "-Wextra")

	if(options)
		add_compile_options("-O3" "-march=native" "-ffast-math" "-ftree-vectorize")
	endif()

	if(warnings-as-errors)
		add_compile_options("-Werror")
	endif()

	if(APPLE)
		add_link_options("-Wl,-dead_strip")

		if(symbols)
			add_compile_options("-gfull" "-gdwarf-2")
		endif()
	else()
		add_link_options("-Wl,-z,relro" "-Wl,-z,now")

		# Ensure _FORTIFY_SOURCE is not used in debug builds.
		#
		# First, ensure _FORTIFY_SOURCE is undefined.
		# Then -- and, only for release builds -- set _FORTIFY_SOURCE=2.
		#
		# We can't use _FORTIFY_SOURCE in debug builds (which are built with -O0) because _FORTIFY_SOURCE=1 requires -O1 and _FORTIFY_SOURCE=2 requires -O2.
		# Modern GLIBCs warn about this since https://sourceware.org/bugzilla/show_bug.cgi?id=13979.
		# In Mumble builds with warnings-as-errors, this will cause build failures.
		add_compile_options("-U_FORTIFY_SOURCE")

		if($<CONFIG:Debug>)
			add_compile_options("-fstack-protector" "-fPIE")
			add_link_options("-pie" "-Wl,--no-add-needed")
		else()
			add_compile_options("-D_FORTIFY_SOURCE=2")
		endif()

		if(symbols)
			add_compile_options("-g")
		endif()
	endif()
endif()

add_subdirectory(src)

if(g15 AND WIN32)
	add_subdirectory(g15helper)
endif()

if(overlay)
	if(WIN32)
		add_subdirectory(overlay)
	else()
		add_subdirectory(overlay_gl)
	endif()
endif()

if(plugins)
	add_subdirectory(plugins)
endif()
